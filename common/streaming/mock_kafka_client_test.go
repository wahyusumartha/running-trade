// Code generated by MockGen. DO NOT EDIT.
// Source: kolangkoding.com/experiment/common/streaming (interfaces: kafkaClient)
//
// Generated by this command:
//
//	mockgen -destination=mock_kafka_client_test.go -package=streaming . kafkaClient
//

// Package streaming is a generated GoMock package.
package streaming

import (
	context "context"
	reflect "reflect"

	kgo "github.com/twmb/franz-go/pkg/kgo"
	gomock "go.uber.org/mock/gomock"
)

// MockkafkaClient is a mock of kafkaClient interface.
type MockkafkaClient struct {
	ctrl     *gomock.Controller
	recorder *MockkafkaClientMockRecorder
	isgomock struct{}
}

// MockkafkaClientMockRecorder is the mock recorder for MockkafkaClient.
type MockkafkaClientMockRecorder struct {
	mock *MockkafkaClient
}

// NewMockkafkaClient creates a new mock instance.
func NewMockkafkaClient(ctrl *gomock.Controller) *MockkafkaClient {
	mock := &MockkafkaClient{ctrl: ctrl}
	mock.recorder = &MockkafkaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkafkaClient) EXPECT() *MockkafkaClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockkafkaClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockkafkaClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockkafkaClient)(nil).Close))
}

// Produce mocks base method.
func (m *MockkafkaClient) Produce(ctx context.Context, record *kgo.Record, callback func(*kgo.Record, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Produce", ctx, record, callback)
}

// Produce indicates an expected call of Produce.
func (mr *MockkafkaClientMockRecorder) Produce(ctx, record, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockkafkaClient)(nil).Produce), ctx, record, callback)
}

// ProduceSync mocks base method.
func (m *MockkafkaClient) ProduceSync(ctx context.Context, records ...*kgo.Record) kgo.ProduceResults {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range records {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceSync", varargs...)
	ret0, _ := ret[0].(kgo.ProduceResults)
	return ret0
}

// ProduceSync indicates an expected call of ProduceSync.
func (mr *MockkafkaClientMockRecorder) ProduceSync(ctx any, records ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, records...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceSync", reflect.TypeOf((*MockkafkaClient)(nil).ProduceSync), varargs...)
}
