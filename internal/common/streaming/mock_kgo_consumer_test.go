// Code generated by MockGen. DO NOT EDIT.
// Source: kolangkoding.com/experiment/common/streaming (interfaces: kgoConsumer)
//
// Generated by this command:
//
//	mockgen -destination=mock_kgo_consumer_test.go -package=streaming . kgoConsumer
//

// Package streaming is a generated GoMock package.
package streaming

import (
	context "context"
	reflect "reflect"

	kgo "github.com/twmb/franz-go/pkg/kgo"
	gomock "go.uber.org/mock/gomock"
)

// MockkgoConsumer is a mock of kgoConsumer interface.
type MockkgoConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockkgoConsumerMockRecorder
	isgomock struct{}
}

// MockkgoConsumerMockRecorder is the mock recorder for MockkgoConsumer.
type MockkgoConsumerMockRecorder struct {
	mock *MockkgoConsumer
}

// NewMockkgoConsumer creates a new mock instance.
func NewMockkgoConsumer(ctrl *gomock.Controller) *MockkgoConsumer {
	mock := &MockkgoConsumer{ctrl: ctrl}
	mock.recorder = &MockkgoConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkgoConsumer) EXPECT() *MockkgoConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockkgoConsumer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockkgoConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockkgoConsumer)(nil).Close))
}

// PollFetches mocks base method.
func (m *MockkgoConsumer) PollFetches(ctx context.Context) kgo.Fetches {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollFetches", ctx)
	ret0, _ := ret[0].(kgo.Fetches)
	return ret0
}

// PollFetches indicates an expected call of PollFetches.
func (mr *MockkgoConsumerMockRecorder) PollFetches(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollFetches", reflect.TypeOf((*MockkgoConsumer)(nil).PollFetches), ctx)
}
