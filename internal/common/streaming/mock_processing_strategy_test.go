// Code generated by MockGen. DO NOT EDIT.
// Source: kolangkoding.com/experiment/common/streaming (interfaces: ProcessingStrategy)
//
// Generated by this command:
//
//	mockgen -destination=mock_processing_strategy_test.go -package=streaming . ProcessingStrategy
//

// Package streaming is a generated GoMock package.
package streaming

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessingStrategy is a mock of ProcessingStrategy interface.
type MockProcessingStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingStrategyMockRecorder
	isgomock struct{}
}

// MockProcessingStrategyMockRecorder is the mock recorder for MockProcessingStrategy.
type MockProcessingStrategyMockRecorder struct {
	mock *MockProcessingStrategy
}

// NewMockProcessingStrategy creates a new mock instance.
func NewMockProcessingStrategy(ctrl *gomock.Controller) *MockProcessingStrategy {
	mock := &MockProcessingStrategy{ctrl: ctrl}
	mock.recorder = &MockProcessingStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingStrategy) EXPECT() *MockProcessingStrategyMockRecorder {
	return m.recorder
}

// ProcessRecords mocks base method.
func (m *MockProcessingStrategy) ProcessRecords(ctx context.Context, records []ConsumerMessage, handler MessageHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRecords", ctx, records, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRecords indicates an expected call of ProcessRecords.
func (mr *MockProcessingStrategyMockRecorder) ProcessRecords(ctx, records, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRecords", reflect.TypeOf((*MockProcessingStrategy)(nil).ProcessRecords), ctx, records, handler)
}
